# Header section

%{

use warnings;

%}

%%

# Rules section

file: namelist_list card_list
        { return { namelists => $_[1], cards => $_[2] } }
    ;

namelist_list: namelist
             | namelist_list namelist
                { return { %{$_[1]}, %{$_[2]} } }
             ;

namelist: namelist_header nl keyvalue_list nl '/' nl
            { return { $_[1] => $_[3] } }
        ;

keyvalue_list: keyvalue
             | keyvalue_list ',' keyvalue
                { return { %{$_[1]}, %{$_[3]} } }
             | keyvalue_list nl  keyvalue
                { return { %{$_[1]}, %{$_[3]} } }
             | keyvalue_list ',' nl keyvalue
                { return { %{$_[1]}, %{$_[4]} } }
             ;

keyvalue: word '=' word
            { return { $_[1] => $_[3] } }
        ;

card_list: card
         | card_list card
            { return { %{$_[1]}, %{$_[2]} } }
         ;

card: card_header nl
        { return { $_[1] => { values => [] } } }
    | card_header option nl
        { return { $_[1] => { option => $_[2], values => [] } } }
    | card value_list nl
        { my( $name ) = keys %{$_[1]}; $_[1]->{$name}{values} = [ @{$_[1]->{$name}{values}}, @{$_[2]} ]; return $_[1] }
    ;

value_list: word
            { return [ [ $_[1] ] ] }
          | value_list word
            {
                push @{$_[1]->[-1]}, $_[2];
                return $_[1];
            }
          | value_list nl word
            {
                push @{$_[1]}, [ $_[3] ];
                return $_[1];
            }
          ;

%%

# Footer section

sub _Lexer
{
    my( $self ) = @_;

    for( $self->YYData->{INPUT} ) {
        s/^ +//;

        if( s/^(\n)// ) {
            return ( 'nl', $1 );
        } elsif( s/^&(\S+)// ) {
            return ( 'namelist_header', $1 );
        } elsif( s/^(ATOMIC_SPECIES|ATOMIC_POSITIONS|K_POINTS|CELL_PARAMETERS|OCCUPATIONS|CONSTRAINTS|ATOMIC_VELOCITIES|ATOMIC_FORCES|ADDITIONAL_K_POINTS|SOLVENTS|HUBBARD)// ) {
            return ( 'card_header', $1 );
        } elsif( s/^\{ *([^} ]+) *\}// ) {
            return ( 'option', $1 );
        } elsif( s/^([=\/,])// ) {
            return ( $1, $1 );
        } elsif( s/^'([^']*)'// || s/^([^\s=]+)// ) {
            return ( 'word', $1 );
        } else {
            return ( '', '' );
        }
    }
}

sub parse
{
    my( $self, $string ) = @_;
    $self->YYData->{INPUT} = $string;
    return $self->YYParse( yylex => \&_Lexer, yydebug => 5 );
}

1;
